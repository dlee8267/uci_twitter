"use strict";(self.webpackChunkuci_twitter=self.webpackChunkuci_twitter||[]).push([[253],{634:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _006_visualization)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 141 modules\nvar src = __webpack_require__(740);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(796);\n;// ./src/components/graphs/demo.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n\nvar Demo = function Demo() {\n  var containerRef = (0,react.useRef)(null);\n  (0,react.useEffect)(function () {\n    var container = src/* select */.Ltv(containerRef.current);\n    var width = container.node().clientWidth || 960;\n    var height = 600;\n    var csvUrl = "".concat("https://raw.githubusercontent.com/dlee8267/uci_twitter/main/public", "/data/data.csv");\n    container.selectAll("*").remove();\n    var slider = container.append("input").attr("type", "range").attr("min", 0).attr("step", 1).style("width", width * 0.9 + "px").style("margin", "0 auto 10px auto").style("display", "block");\n    var svg = container.append("svg").attr("width", width).attr("height", height);\n    var legend = svg.append("g").attr("class", "legend").attr("transform", "translate(".concat(width - 150, ", ", 10, ")"));\n    legend.append("rect").attr("width", 140).attr("height", 80).attr("rx", 8).attr("ry", 8).attr("fill", "white").attr("stroke", "#ccc").attr("stroke-width", 1).attr("opacity", 0.9);\n\n    // Legend entries\n    var items = [{\n      color: "steelblue",\n      label: "Actual (past)"\n    }, {\n      color: "red",\n      label: "Actual (latest)"\n    }, {\n      color: "orange",\n      label: "Predicted"\n    }];\n    items.forEach(function (item, i) {\n      legend.append("circle").attr("cx", 20).attr("cy", 20 + i * 20).attr("r", 5).attr("fill", item.color);\n      legend.append("text").attr("x", 40).attr("y", 20 + i * 20).attr("alignment-baseline", "middle").attr("font-size", "12px").attr("font-family", "Arial").text(item.label);\n    });\n    var timeText = svg.append("g").attr("class", "time-text");\n    var projection = src/* geoAlbersUsa */.UtK().scale(1000).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW(projection);\n    src/* json */.Pq9("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json").then(function (usTopo) {\n      var states = (0,feature/* default */.A)(usTopo, usTopo.objects.states);\n      svg.append("path").datum(states).attr("d", path).attr("fill", "#eee").attr("stroke", "#999");\n      src/* csv */.fu7(csvUrl, src/* autoType */.cGt).then(function (data) {\n        data.forEach(function (d, i) {\n          return d.frame = i;\n        });\n        slider.attr("max", data.length - 1);\n        slider.property("value", 16);\n        var pointsGroup = svg.append("g").attr("class", "points");\n        function update(frame) {\n          var visibleData = [];\n          if (frame < 15) {\n            // For frames 0..14 show actual up to frame inclusive\n            visibleData = data.slice(0, frame + 1).map(function (d) {\n              return _objectSpread(_objectSpread({}, d), {}, {\n                type: "actual"\n              });\n            });\n          } else {\n            // For frame >= 15:\n            // actual: last 15 points before current frame + current actual point (total 16 actual points)\n            // predicted: current predicted point at frame\n\n            var actual = data.slice(frame - 15, frame + 1).map(function (d) {\n              return _objectSpread(_objectSpread({}, d), {}, {\n                type: "actual"\n              });\n            });\n            var predicted = data.slice(frame, frame + 1).map(function (d) {\n              return _objectSpread(_objectSpread({}, d), {}, {\n                type: "pred"\n              });\n            });\n            visibleData = actual.concat(predicted);\n          }\n          visibleData = visibleData.filter(function (d) {\n            var coords = d.type === "pred" ? projection([d.pred_lon, d.pred_lat]) : projection([d.actual_lon, d.actual_lat]);\n            return coords !== null && coords !== undefined;\n          });\n          var latestActual = visibleData.filter(function (d) {\n            return d.type === "actual";\n          }).sort(function (a, b) {\n            return b.frame - a.frame;\n          })[0];\n          var latestPred = visibleData.filter(function (d) {\n            return d.type === "pred";\n          }).sort(function (a, b) {\n            return b.frame - a.frame;\n          })[0];\n          var actualTimeText = latestActual ? "Actual Time: \\xA0\\xA0\\xA0".concat(latestActual.acutual_time) : "";\n          var predTimeText = latestPred ? "Predicted Time: ".concat(latestPred.pred_time) : "";\n          if (frame < 16) predTimeText = "";\n          timeText.selectAll("text").remove();\n          if (actualTimeText) {\n            timeText.append("text").attr("x", 10).attr("y", 20).attr("font-size", "14px").attr("font-family", "monospace").attr("fill", "#333").text(actualTimeText);\n          }\n          if (predTimeText) {\n            timeText.append("text").attr("x", 10).attr("y", 40).attr("font-size", "14px").attr("font-family", "monospace").attr("fill", "#333").text(predTimeText);\n          }\n          var circles = pointsGroup.selectAll("circle").data(visibleData, function (d) {\n            return d.frame + "-" + d.type;\n          });\n          var actualFrames = visibleData.filter(function (d) {\n            return d.type === "actual";\n          }).map(function (d) {\n            return d.frame;\n          });\n          var maxActualFrame = actualFrames.length > 0 ? Math.max.apply(Math, _toConsumableArray(actualFrames)) : null;\n          circles.enter().append("circle").attr("r", 5).attr("opacity", function (d) {\n            return d.type === "pred" ? 0.8 : 1;\n          }).attr("fill", function (d) {\n            if (d.type === "pred") return "orange";\n            if (d.frame === maxActualFrame) return "green";\n            return "steelblue";\n          }).attr("cx", function (d) {\n            var coords = d.type === "pred" ? projection([d.pred_lon, d.pred_lat]) : projection([d.actual_lon, d.actual_lat]);\n            return coords ? coords[0] : -10;\n          }).attr("cy", function (d) {\n            var coords = d.type === "pred" ? projection([d.pred_lon, d.pred_lat]) : projection([d.actual_lon, d.actual_lat]);\n            return coords ? coords[1] : -10;\n          }).merge(circles).transition().duration(150).attr("cx", function (d) {\n            var coords = d.type === "pred" ? projection([d.pred_lon, d.pred_lat]) : projection([d.actual_lon, d.actual_lat]);\n            return coords ? coords[0] : -10;\n          }).attr("cy", function (d) {\n            var coords = d.type === "pred" ? projection([d.pred_lon, d.pred_lat]) : projection([d.actual_lon, d.actual_lat]);\n            return coords ? coords[1] : -10;\n          }).attr("fill", function (d) {\n            if (d.type === "pred") return "orange";\n            if (d.frame === maxActualFrame) return "red";\n            return "steelblue";\n          });\n          circles.exit().remove();\n        }\n        update(16);\n        slider.on("input", function () {\n          update(+this.value);\n        });\n      });\n    });\n    return function () {\n      container.selectAll("*").remove();\n    };\n  }, []);\n  return /*#__PURE__*/react.createElement("div", {\n    ref: containerRef,\n    style: {\n      width: "100%"\n    }\n  });\n};\n/* harmony default export */ const demo = (Demo);\n;// ./src/components/006_visualization.js\n\n\nvar visualization = function visualization() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "006"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Visualization"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Visualizing y_pred and y_actual on the map immediately reveals the model\'s major flaw. The blue dots represent the 15 previous points used to generate the prediction, the red dot shows the actual location, and the orange dot indicates the predicted location. While the red dot jumps unpredictably, the model plays it safe by consistently predicting locations near the geographic center."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "As for timestamp prediction, the model suffers from the same issue discussed in the previous section. The predictions are consistently close, but the time shifts are almost always too small."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(demo, null)));\n};\n/* harmony default export */ const _006_visualization = (visualization);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///634\n\n}')}}]);